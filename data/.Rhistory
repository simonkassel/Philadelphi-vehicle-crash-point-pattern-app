devtools::install_github("stattleship/stattleship-r")
library(stattleshipR)
set_token('08110e238d450d176d5ab31843e51280')
league <- "nba"
sport <- "basketball"
ep <- "players"
q_body <- list()
players <- ss_get_result(sport = sport, league = league, ep = ep,
query = q_body, version = 1, walk = TRUE)
players_df <- do.call("rbind", lapply(players, function(x) x$players))
head(players_df)
library(rgdal)
setwd("~/Dropbox/CPLN_690_javascript/js_clustering_algorithms/data/")
dir()
c <- readOGR(".", "crashes.geojson")
c <- rgdal::readOGR(".", "crashes.geojson")
c <- rgdal::readOGR(".", "crashes.geojson", encoding = "geojson")
?readOGR
c <- rgdal::readOGR(".", "crashes", encoding = "geojson")
c <- rgdal::readOGR(".", "crashes", encoding = "OGRGeoJSON")
c <- rgdal::readOGR(".", "crashes.geojson", encoding = "OGRGeoJSON")
c <- rgdal::readOGR("crashes.geojson", encoding = "OGRGeoJSON")
plot(c)
plot(c)
head(c@data)
c@coords
cr <- c@data
str(cr)
table(cr$CRASH_YEAR)
range(cr$TIME_OF_DAY)
library(dplyr)
crf <- filter(cr, complete.cases(cr$TIME_OF_DAY))
crf <- na.omit(cr)
range(crf$TIME_OF_DAY)
library(lubridate)
crf$TIME_OF_DAY %>% head(100)
crf$HOUR_OF_DAY %>% head(100)
ggplot(crf, aes(x = X, y = Y, color = ILLUMINATION)) + geom_point()
library(ggplot2)
ggplot(crf, aes(x = X, y = Y, color = as.factor(ILLUMINATION))) + geom_point()
ggplot(crf, aes(x = X, y = Y)) + geom_point() + facet_wrap(~ILLUMINATION)
ggplot(crf, aes(x = X, y = Y)) + geom_point(size = 0.1) +
facet_wrap(~ILLUMINATION) + coord_map() theme_void()
ggplot(crf, aes(x = X, y = Y)) + geom_point(size = 0.1) +
facet_wrap(~ILLUMINATION) + coord_map() + theme_void()
ggplot(crf, aes(x = X, y = Y)) + geom_point(size = 0.1) +
facet_wrap(~ILLUMINATION) + coord_map() + theme_void() + ggtitle("Illumination")
ggplot(crf, aes(x = X, y = Y)) + geom_point(size = 0.1) +
facet_wrap(~INTERSECT_TYPE) + coord_map() + theme_void() + ggtitle("Intersection type")
ggplot(crf, aes(x = X, y = Y)) + geom_point(size = 0.1) +
facet_wrap(~COLLISION_TYPE) + coord_map() + theme_void() + ggtitle("Collision type")
names(crf)
head(crf)
crf <- filter(crf, crf$HOUR_OF_DAY != 99)
crc <- select(crf, X, Y, CRASH_MONTH, CRASH_YEAR, COLLISION_TYPE, PED_COUNT, BICYCLE_COUNT, VEHICLE_COUNT)
crc <- select(crf, X, Y, CRASH_MONTH, CRASH_YEAR, TIME_OF_DAY, COLLISION_TYPE,
MAX_SEVERITY_LEVEL, ROAD_CONDITION, PED_COUNT, BICYCLE_COUNT,
VEHICLE_COUNT)
head(crc)
crc$BICYCLE_COUNT <- ifelse(crc$BICYCLE_COUNT > 0, 1, 0)
crc$PED_COUNT <- ifelse(crc$PED_COUNT > 0, 1, 0)
crc <- select(crf, X, Y, CRASH_MONTH, CRASH_YEAR, TIME_OF_DAY, COLLISION_TYPE,
MAX_SEVERITY_LEVEL, ROAD_CONDITION)
crc$BICYCLE <- ifelse(crf$BICYCLE_COUNT > 0, 1, 0)
crc$PED <- ifelse(crf$PED_COUNT > 0, 1, 0)
crc$VEHICLE <- ifelse(crf$VEHICLE_COUNT > 0, 1, 0)
head(crc)
table(crc$CRASH_MONTH)
c14 <- filter(crc, CRASH_YEAR == 2014)
ggplot(c14, aes(X, Y)) + geom_point(size = 0.1) + facet_wrap(~CRASH_MONTH) + coord_map()
library(sp)
crc <- filter(crc, (crc$VEHICLE + crc$PED + crc$BICYCLE) > 0 )
crc <- filter(crc, ROAD_CONDITION != 9)
crc <- filter(crc, MAX_SEVERITY_LEVEL != 9)
crc <- select(crf, X, Y, CRASH_MONTH, CRASH_YEAR, TIME_OF_DAY, COLLISION_TYPE,
MAX_SEVERITY_LEVEL, ROAD_CONDITION)
crc$BICYCLE <- ifelse(crf$BICYCLE_COUNT > 0, 1, 0)
crc$PED <- ifelse(crf$PED_COUNT > 0, 1, 0)
crc$VEHICLE <- ifelse(crf$VEHICLE_COUNT > 0, 1, 0)
crc <- filter(crc, (crc$VEHICLE + crc$PED + crc$BICYCLE) > 0 )
crc <- filter(crc, ROAD_CONDITION != 9)
head(crc)
cr.sp <- SpatialPointsDataFrame(cbind(crc$X, crc$Y), data = crc, proj4string = "+init=epsg:4326 +proj=longlat
+ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0")
cr.sp <- SpatialPointsDataFrame(cbind(crc$X, crc$Y), data = crc, proj4string = CRS("+init=epsg:4326 +proj=longlat
+ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0"))
plot(cr.sp)
?writeOGR
writeOGR(cr.sp, ".", "crashes_filtered", driver="GeoJSON")
library(rgdal)
writeOGR(cr.sp, ".", "crashes_filtered", driver="GeoJSON")
writeOGR(cr.sp, "crashes_filtered", driver="GeoJSON")
writeOGR(cr.sp, ".", "crashes_filtered.geojson", driver="GeoJSON")
getwd()
path = "/Users/SimonKassel/Dropbox/CPLN_690_javascript/js_clustering_algorithms/data"
writeOGR(cr.sp, path, "crashes_filtered", driver="GeoJSON")
writeOGR(cr.sp, "crashes_filtered.geojson", driver="GeoJSON")
writeOGR(cr.sp, "crashes_filtered.geojson", layer = "crashes_filtered", driver="GeoJSON")
